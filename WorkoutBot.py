import os
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.ext.webhookhandler import WebhookHandler

from workouts import generate_workouts, build_day_keyboard, build_difficulty_keyboard, WORKOUTS

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ
user_difficulty = {}

# Flask
app = Flask(__name__)
TOKEN = os.getenv("BOT_TOKEN")
application = Application.builder().token(TOKEN).build()
webhook_handler = WebhookHandler(application)

@app.route("/")
def index():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

@app.post("/webhook")
async def telegram_webhook():
    return await webhook_handler.handle(request)

# –ö–æ–º–∞–Ω–¥–∏
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π —Ñ—ñ—Ç–Ω–µ—Å-–±–æ—Ç. –û–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:',
        reply_markup=build_difficulty_keyboard()
    )

async def list_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_difficulty:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start.",
            reply_markup=build_difficulty_keyboard()
        )
    else:
        await update.message.reply_text(
            f"–û–±–µ—Ä–∏ –¥–µ–Ω—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–≤–Ω—è **{user_difficulty[user_id]}**:",
            reply_markup=build_day_keyboard(1),
            parse_mode='Markdown'
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data.startswith("difficulty_"):
        difficulty_level = data.split("_")[1]
        user_difficulty[user_id] = difficulty_level
        await query.edit_message_text(f"–¢–∏ –æ–±—Ä–∞–≤ —Ä—ñ–≤–µ–Ω—å: **{difficulty_level}**.", parse_mode='Markdown')
        await query.message.reply_text(
            f"–û–±–µ—Ä–∏ –¥–µ–Ω—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É –¥–ª—è —Ä—ñ–≤–Ω—è **{difficulty_level}**:",
            reply_markup=build_day_keyboard(1), parse_mode='Markdown'
        )
    elif data.startswith("day_"):
        if user_id not in user_difficulty:
            await query.edit_message_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start.")
            await query.message.reply_markup(reply_markup=build_difficulty_keyboard())
            return

        day_number = int(data.split("_")[1])
        selected_difficulty = user_difficulty[user_id]
        workout_data = WORKOUTS.get(day_number)

        if workout_data and selected_difficulty in workout_data:
            workout_list = workout_data[selected_difficulty]
            response = f"üí™ **–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –î–µ–Ω—å {day_number} ({selected_difficulty} —Ä—ñ–≤–µ–Ω—å)**\n\n"
            
            response += "\n".join([f"‚Ä¢ {item}" for item in workout_list])
        else:
            response = f"–ù–∞ –∂–∞–ª—å, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–Ω—è {day_number} ({selected_difficulty} —Ä—ñ–≤–µ–Ω—å) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

        await query.edit_message_text(response, parse_mode='Markdown')
        keyboard_after_workout = [
            [InlineKeyboardButton("–û–±–µ—Ä–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å", callback_data="show_days_1")],
            [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ", callback_data="change_difficulty")]
        ]
        await query.message.reply_text("–©–æ –¥–∞–ª—ñ?", reply_markup=InlineKeyboardMarkup(keyboard_after_workout))
    elif data.startswith("page_"):
        page_number = int(data.split("_")[1])
        await query.edit_message_reply_markup(reply_markup=build_day_keyboard(page_number))
    elif data == "show_days_1":
        if user_id not in user_difficulty:
            await query.edit_message_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start.",
                reply_markup=build_difficulty_keyboard()
            )
        else:
            await query.edit_message_text(
                f"–û–±–µ—Ä–∏ –¥–µ–Ω—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É –¥–ª—è —Ä—ñ–≤–Ω—è **{user_difficulty[user_id]}**:",
                reply_markup=build_day_keyboard(1),
                parse_mode='Markdown'
            )
    elif data == "change_difficulty":
        await query.edit_message_text("–û–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:", reply_markup=build_difficulty_keyboard())

# –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è —ñ –¥–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
generate_workouts()
application.add_handler(CommandHandler("start", start))
application.add_handler(CommandHandler("list", list_days))
application.add_handler(CallbackQueryHandler(button_handler))
