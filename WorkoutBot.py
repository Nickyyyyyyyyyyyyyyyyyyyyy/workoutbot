import os
from flask import Flask, request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
from telegram.constants import ParseMode # –û–±–æ–≤'—è–∑–∫–æ–≤–æ —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ParseMode.MARKDOWN

# –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ workouts.py —ñ—Å–Ω—É—î —ñ –º—ñ—Å—Ç–∏—Ç—å —Ü—ñ —Ñ—É–Ω–∫—Ü—ñ—ó/–¥–∞–Ω—ñ
# –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ workouts.py –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º—É –∂ –∫–∞—Ç–∞–ª–æ–∑—ñ, —â–æ —ñ WorkoutBot.py
from workouts import generate_workouts, build_day_keyboard, build_difficulty_keyboard, WORKOUTS

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –æ–±—Ä–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_difficulty = {}

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Flask –¥–æ–¥–∞—Ç–∫—É
app = Flask(__name__)

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∑—ñ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv("BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Application –¥–ª—è python-telegram-bot
application = Application.builder().token(TOKEN).build()

# –ì–æ–ª–æ–≤–Ω–∏–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É
@app.route("/")
def index():
    return "–ë–æ—Ç –ø—Ä–∞—Ü—é—î!"

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–µ–±—Ö—É–∫—ñ–≤ –≤—ñ–¥ Telegram
@app.post("/webhook")
async def telegram_webhook():
    """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è Telegram —á–µ—Ä–µ–∑ –≤–µ–±—Ö—É–∫."""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑ —Ç—ñ–ª–∞ –∑–∞–ø–∏—Ç—É Flask
        update = Update.de_json(request.get_json(force=True), application.bot)
        # –û–±—Ä–æ–±–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Application
        await application.process_update(update)
    except Exception as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {e}")
        return "–ü–æ–º–∏–ª–∫–∞", 500 # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫
    return "ok" # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ "ok", —â–æ –æ–∑–Ω–∞—á–∞—î —É—Å–ø—ñ—à–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è

# --- –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –∫–Ω–æ–ø–æ–∫ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        '–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π —Ñ—ñ—Ç–Ω–µ—Å-–±–æ—Ç. –û–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:',
        reply_markup=build_difficulty_keyboard()
    )

async def list_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in user_difficulty:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start.",
            reply_markup=build_difficulty_keyboard()
        )
    else:
        await update.message.reply_text(
            f"–û–±–µ—Ä–∏ –¥–µ–Ω—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–≤–Ω—è **{user_difficulty[user_id]}**:",
            reply_markup=build_day_keyboard(1),
            parse_mode=ParseMode.MARKDOWN
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    user_id = query.from_user.id

    if data.startswith("difficulty_"):
        difficulty_level = data.split("_")[1]
        user_difficulty[user_id] = difficulty_level
        await query.edit_message_text(f"–¢–∏ –æ–±—Ä–∞–≤ —Ä—ñ–≤–µ–Ω—å: **{difficulty_level}**.", parse_mode=ParseMode.MARKDOWN)
        await query.message.reply_text(
            f"–û–±–µ—Ä–∏ –¥–µ–Ω—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É –¥–ª—è —Ä—ñ–≤–Ω—è **{difficulty_level}**:",
            reply_markup=build_day_keyboard(1), parse_mode=ParseMode.MARKDOWN
        )
    elif data.startswith("day_"):
        if user_id not in user_difficulty:
            await query.edit_message_text("–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start.")
            await query.message.reply_markup(reply_markup=build_difficulty_keyboard())
            return

        day_number = int(data.split("_")[1])
        selected_difficulty = user_difficulty[user_id]
        workout_data = WORKOUTS.get(day_number)

        if workout_data and selected_difficulty in workout_data:
            workout_list = workout_data[selected_difficulty]
            response = f"üí™ **–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –Ω–∞ –î–µ–Ω—å {day_number} ({selected_difficulty} —Ä—ñ–≤–µ–Ω—å)**\n\n"
            response += "\n".join([f"‚Ä¢ {item}" for item in workout_list])
        else:
            response = f"–ù–∞ –∂–∞–ª—å, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –¥–ª—è –¥–Ω—è {day_number} ({selected_difficulty} —Ä—ñ–≤–µ–Ω—å) –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."

        await query.edit_message_text(response, parse_mode=ParseMode.MARKDOWN)
        keyboard_after_workout = [
            [InlineKeyboardButton("–û–±–µ—Ä–∏ —ñ–Ω—à–∏–π –¥–µ–Ω—å", callback_data="show_days_1")],
            [InlineKeyboardButton("–ó–º—ñ–Ω–∏—Ç–∏ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ", callback_data="change_difficulty")]
        ]
        await query.message.reply_text("–©–æ –¥–∞–ª—ñ?", reply_markup=InlineKeyboardMarkup(keyboard_after_workout))
    elif data.startswith("page_"):
        page_number = int(data.split("_")[1])
        await query.edit_message_reply_markup(reply_markup=build_day_keyboard(page_number))
    elif data == "show_days_1":
        if user_id not in user_difficulty:
            await query.edit_message_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start.",
                reply_markup=build_difficulty_keyboard()
            )
        else:
            await query.edit_message_text(
                f"–û–±–µ—Ä–∏ –¥–µ–Ω—å —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É –¥–ª—è —Ä—ñ–≤–Ω—è **{user_difficulty[user_id]}**:",
                reply_markup=build_day_keyboard(1),
                parse_mode=ParseMode.MARKDOWN
            )
    elif data == "change_difficulty":
        await query.edit_message_text("–û–±–µ—Ä–∏ —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ —Ç—Ä–µ–Ω—É–≤–∞–Ω—å:", reply_markup=build_difficulty_keyboard())

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ —Ç–∞ –∑–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –¥–æ–¥–∞—Ç–∫—É
    generate_workouts()

    # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –¥–æ Application
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", list_days))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –î–ª—è Render, gunicorn –∑–∞–ø—É—Å–∫–∞—î Flask –¥–æ–¥–∞—Ç–æ–∫ (`app`).
    # –ù–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–ª–∏–∫–∞—Ç–∏ application.run_polling() –∞–±–æ application.run_webhook() —Ç—É—Ç,
    # –æ—Å–∫—ñ–ª—å–∫–∏ –æ–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω—å –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ —É –º–∞—Ä—à—Ä—É—Ç—ñ /webhook.
    pass # –ù—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏—Ç–∏ —Ç—É—Ç, gunicorn –∑–∞–ø—É—Å—Ç–∏—Ç—å Flask –¥–æ–¥–∞—Ç–æ–∫
